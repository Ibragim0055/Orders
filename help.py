import asyncio
import random
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

bot = Bot(token="6795561368:AAF_V-ZDgABhTER9jH3xiAM8jF1vpGNx5Ew")
dp = Dispatcher(storage=MemoryStorage())
ID_CHANNEL = -1002140554954
ID_GROUP = -1002066486603
ID_CHANNEL_SOT = -1002113161420

tema = {}
context_text = {}
context_user = {}
context_user_msg = {}

class context_sot1(StatesGroup):
    —Ç–µ–∫—Å—Ç = State()

class context_sot(StatesGroup):
    user_id = State()
    —Ç–∏–∫–µ—Ç = State()
    —Ç–µ–º–∞ = State()
    username = State()
    —Ç–µ–∫—Å—Ç = State()
    id_message = State()

class context(StatesGroup):
    user_id = State()
    —Ç–∏–∫–µ—Ç = State()
    —Ç–µ–º–∞ = State()
    id = State()
    —Ç–µ–∫—Å—Ç = State()
    id_message = State()

class context1(StatesGroup):
    —Ç–µ–∫—Å—Ç = State()

class context_message(StatesGroup):
    user_id = State()
    —Ç–∏–∫–µ—Ç = State()
    —Ç–µ–º–∞ = State()
    id = State()
    —Ç–µ–∫—Å—Ç = State()
    id_message = State()



@dp.message(Command('start'))
async def start(message: Message):
    a_button = InlineKeyboardButton(text='–î–µ–ø–æ–∑–∏—Çüí∏', callback_data='–î–µ–ø–æ–∑–∏—Çüí∏')
    b_button = InlineKeyboardButton(text='–í—ã–≤–æ–¥üí∞', callback_data='–í—ã–≤–æ–¥üí∞')
    c_button = InlineKeyboardButton(text='–°—Ç–∞–≤–∫–∏üé∞', callback_data='–°—Ç–∞–≤–∫–∏üé∞')
    d_button = InlineKeyboardButton(text='–ë–æ–Ω—É—Å—ãüéÅ', callback_data='–ë–æ–Ω—É—Å—ãüéÅ')
    e_button = InlineKeyboardButton(text='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞üë•', callback_data='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞üë•')
    f_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    g_button = InlineKeyboardButton(text='–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æü§ù', callback_data='–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æü§ù')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button, b_button], [c_button], [d_button], [e_button], [f_button], [g_button]])
    await bot.send_message(message.from_user.id, text=f"üëã –ü—Ä–∏–≤–µ—Ç, <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ Pinto.\n\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Å–≤–æ–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∏–∂–µ –∏ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!", reply_markup=button, parse_mode="HTML")




@dp.message(StateFilter(default_state))
async def reply(message: Message):
    global context_text, context_reply, context_delete
    if message.chat.type in ['group', 'supergroup']:
        if message.reply_to_message:
            for i in context_user:
                if context_user[i].id_message == message.reply_to_message.message_id:
                    if message.text == '/q' or message.text == '/r':
                        a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
                        button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
                        tiket = context_user[i].—Ç–∏–∫–µ—Ç
                        await bot.send_message(i, text=f'–û–±—Ä–∞—â–µ–Ω–∏–µ {tiket} –∑–∞–∫—Ä—ã—Ç–æ.', reply_markup=button)
                        await message.reply(f'–û–±—Ä–∞—â–µ–Ω–∏–µ {tiket} –∑–∞–∫—Ä—ã—Ç–æ.')
                        del context_user[i]
                        id_msg = context_delete.get(i, 0)
                        await bot.unpin_chat_message(ID_CHANNEL, id_msg)
                    else:
                        context_reply = {i: message.message_id}
                        a_button = InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data='–û—Ç–≤–µ—Ç–∏—Ç—å')
                        b_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
                        button   = InlineKeyboardMarkup(inline_keyboard=[[a_button, b_button]])
                        await bot.send_message(i, text=message.text, reply_markup=button)
                        context_text[message.reply_to_message.message_id] = message.from_user.id
                    break
            else:
               # await message.reply('–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç!')
               pass
    if message.chat.id == ID_GROUP:
        try:
            user_id = context_text.get(message.forward_from_message_id, 0)
            text= f'–¢–∏–∫–µ—Ç: {context_user[user_id].—Ç–∏–∫–µ—Ç}\n–¢–µ–º–∞: {context_user[user_id].—Ç–µ–º–∞}\n\nID: {context_user[user_id].id}\n–¢–µ–∫—Å—Ç: {context_user[user_id].—Ç–µ–∫—Å—Ç}'
            id_msg = await message.reply(text)
            id_msg = context_user[user_id].id_message = id_msg.message_id
        except:
            pass


            
@dp.callback_query(F.data == '–û—Ç–≤–µ—Ç–∏—Ç—å')
async def –û—Ç–≤–µ—Ç–∏—Ç—å(callback: CallbackQuery, state: FSMContext):
    try:
        if context_user[callback.from_user.id]:
            await callback.message.answer('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞.')
            await state.set_state(context1.—Ç–µ–∫—Å—Ç)
        else:
            await callback.message.answer('–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç!')
    except:
        await callback.message.answer('–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç!')

@dp.message(StateFilter(context1.—Ç–µ–∫—Å—Ç))
async def context_message(message: Message, state: FSMContext):
    try:
        user_id = context_user[message.from_user.id].user_id
        —Ç–∏–∫–µ—Ç = context_user[message.from_user.id].—Ç–∏–∫–µ—Ç
        —Ç–µ–º–∞ = context_user[message.from_user.id].—Ç–µ–º–∞
        id = context_user[message.from_user.id].id
        id_msg = context_reply.get(message.from_user.id, 0)
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.')
        id_msg = await bot.send_message(chat_id=ID_GROUP, text=f'–¢–∏–∫–µ—Ç: {—Ç–∏–∫–µ—Ç}\n–¢–µ–º–∞: {—Ç–µ–º–∞}\n\nID: {id}\n–¢–µ–∫—Å—Ç: {message.text}', reply_to_message_id=id_msg)
        context_user[message.from_user.id].id_message = id_msg.message_id
        context_user[message.from_user.id].—Ç–µ–∫—Å—Ç = message.text
        await state.clear()
    except:
        await message.answer('–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç!')




@dp.callback_query(F.data == '–û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ')
async def –û—Ç–º–µ–Ω–∏—Ç—å_–æ–±—Ä–∞—â–µ–Ω–∏–µ(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        id_msg = context_delete.get(user_id, 0)
        await bot.unpin_chat_message(ID_CHANNEL, id_msg)
        await bot.send_message(chat_id=ID_GROUP, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ!', reply_to_message_id=context_user[callback.from_user.id].id_message)
        del context_delete[user_id]
        await callback.message.answer('–¢–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    except:
        await callback.message.answer('–¢–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ!')



            
@dp.callback_query(F.data == 'üè† –í –Ω–∞—á–∞–ª–æ')
async def –í_–Ω–∞—á–∞–ª–æ(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await start(callback)

async def dialog(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–î–∞', callback_data='–î–∞_–¥–∏')
    b_button = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ù–µ—Ç_–¥–∏')
    button = InlineKeyboardMarkup(inline_keyboard=[[a_button, b_button]])
    await callback.message.answer('–í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è.\n–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ?', reply_markup=button)

@dp.callback_query(F.data.in_(['–î–∞_–¥–∏', '–ù–µ—Ç_–¥–∏']))
async def di(callback: CallbackQuery):
    if callback.data == '–î–∞_–¥–∏':
        del context_user[callback.from_user.id]
        await callback.message.edit_text('–°—Ç–∞—Ä–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.')
        await start(callback)
    if callback.data == '–ù–µ—Ç_–¥–∏':
        await callback.message.edit_text('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ç–≤–µ—Ç.\n–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.')
        await start(callback)




async def –≤–≤–æ–¥(callback: CallbackQuery, state: FSMContext):
    for i in context_user:
        if context_user[i].user_id == callback.from_user.id:
            print('1')
            if context_user[i].id != None:
                print('2')
                await dialog(callback)
                break 
    else:
        a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
        button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
        await callback.message.answer('ü§î–°—Ç—Ä–∞–Ω–Ω–æ...\n\n–ü—Ä–∏—à–ª–∏ –≤ —á–∞—Ç —Å–≤–æ–π ID –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.', reply_markup=button)
        await state.set_state(context.id)

@dp.message(StateFilter(context.id))
async def –≤–≤–æ–¥_id(message: Message, state: FSMContext):
    if message.from_user.id not in context_user:
        context_user[message.from_user.id] = context()
    context_user[message.from_user.id].id = message.text
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await message.answer('üôÇ–û—Ç–ª–∏—á–Ω–æ!\n\n–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –∞ –º—ã —Ç–µ–±–µ –ø–æ–º–æ–∂–µ–º!', reply_markup=button)
    await state.set_state(context.—Ç–µ–∫—Å—Ç)

@dp.message(StateFilter(context.—Ç–µ–∫—Å—Ç))
async def –≤–≤–æ–¥_—Ç–µ–∫—Å—Ç(message: Message, state: FSMContext):
    global context_text, context_user, context_delete
    if message.from_user.id not in context_user:
        context_user[message.from_user.id] = context()
    context_user[message.from_user.id].—Ç–µ–∫—Å—Ç = message.text
    while True:
        num = random.randint(1000000, 9999999)
        if num not in context_user:
            break
        else:
            print('–µ—Å—Ç—å')
    context_user[message.from_user.id].—Ç–∏–∫–µ—Ç = '‚Ññ' + str(num)
    a_button = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', callback_data='–û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ')    
    b_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button]])
    await message.answer(f'üèÉ‚Äç‚ôÇÔ∏è–ë–µ–∂–∏–º –Ω–∞ –ø–æ–º–æ—â—å!\n\n–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä ‚Ññ{num} —Å–æ–∑–¥–∞–Ω–æ.\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ 15 –º–∏–Ω—É—Ç.', reply_markup=button)
    text= f'–¢–∏–∫–µ—Ç: {context_user[message.from_user.id].—Ç–∏–∫–µ—Ç}\n–¢–µ–º–∞: {context_user[message.from_user.id].—Ç–µ–º–∞}\n\nID: {context_user[message.from_user.id].id}\n–¢–µ–∫—Å—Ç: {context_user[message.from_user.id].—Ç–µ–∫—Å—Ç}'
    id_msg1 = await bot.send_message(ID_CHANNEL, text=text)
    await bot.pin_chat_message(ID_CHANNEL, id_msg1.message_id)
    context_user[message.from_user.id].id_message = id_msg1.message_id
    context_user[message.from_user.id].user_id = message.from_user.id
    context_text = {id_msg1.message_id: message.from_user.id}
    context_delete = {message.from_user.id: id_msg1.message_id}
    await state.clear()





@dp.callback_query(F.data == '–î–µ–ø–æ–∑–∏—Çüí∏')
async def –î–µ–ø–æ–∑–∏—Ç(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–ù–µ –Ω–∞—á–∏—Å–ª–∏–ª—Å—è –¥–µ–ø–æ–∑–∏—Ç', callback_data='–ù–µ –Ω–∞—á–∏—Å–ª–∏–ª—Å—è –¥–µ–ø–æ–∑–∏—Ç_–î–µ–ø–æ–∑–∏—Ç')
    b_button = InlineKeyboardButton(text='–ü—Ä–∏—à–ª–∞ –Ω–µ —Ç–∞ —Å—É–º–º–∞', callback_data='–ü—Ä–∏—à–ª–∞ –Ω–µ —Ç–∞ —Å—É–º–º–∞_–î–µ–ø–æ–∑–∏—Ç')
    c_button = InlineKeyboardButton(text='–ù–µ –ø—Ä–∏—à–µ–ª –±–æ–Ω—É—Å –∫ –¥–µ–ø–æ–∑–∏—Ç—É', callback_data='–ù–µ –ø—Ä–∏—à–µ–ª –±–æ–Ω—É—Å –∫ –¥–µ–ø–æ–∑–∏—Ç—É_–î–µ–ø–æ–∑–∏—Ç')
    d_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    e_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_—Å—Ç–∞—Ä—Ç')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [c_button], [d_button, e_button]])
    await callback.message.answer('ü§ì–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?', reply_markup=button)

@dp.callback_query(F.data == '–ù–µ –Ω–∞—á–∏—Å–ª–∏–ª—Å—è –¥–µ–ø–æ–∑–∏—Ç_–î–µ–ø–æ–∑–∏—Ç')
async def –ù–µ_–Ω–∞—á–∏—Å–ª–∏–ª—Å—è_–¥–µ–ø–æ–∑–∏—Ç_–î–µ–ø–æ–∑–∏—Ç(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–ú–µ–Ω—å—à–µ 2 —á–∞—Å–æ–≤', callback_data='–ú–µ–Ω—å—à–µ 2 —á–∞—Å–æ–≤_–î–µ–ø–æ–∑–∏—Ç')
    b_button = InlineKeyboardButton(text='–ë–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤', callback_data='–ë–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤_–î–µ–ø–æ–∑–∏—Ç')
    c_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    d_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_–î–µ–ø–æ–∑–∏—Ç')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [c_button, d_button]])
    await callback.message.answer('‚è≥–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –¥–µ–ø–æ–∑–∏—Ç–∞?', reply_markup=button)

@dp.callback_query(F.data == '–ú–µ–Ω—å—à–µ 2 —á–∞—Å–æ–≤_–î–µ–ø–æ–∑–∏—Ç')
async def –ú–µ–Ω—å—à–µ_2_—á–∞—Å–æ–≤_–î–µ–ø–æ–∑–∏—Ç(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await callback.message.answer('üîé–î–µ–ø–æ–∑–∏—Ç—ã –Ω–∞ —Å–∞–π—Ç –º–æ–≥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –¥–æ 2—Ö —á–∞—Å–æ–≤.\n\n–ï—Å–ª–∏ –ø–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω, —Ç–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞–º –µ—â–µ —Ä–∞–∑ - –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ–º!', reply_markup=button)






@dp.callback_query(F.data == '–ë–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤_–î–µ–ø–æ–∑–∏—Ç')
async def –ë–æ–ª—å—à–µ_2_—á–∞—Å–æ–≤_–î–µ–ø–æ–∑–∏—Ç(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in context_user:
        context_user[callback.from_user.id] = context()
    context_user[callback.from_user.id].—Ç–µ–º–∞ = '–î–µ–ø–æ–∑–∏—Ç/–ù–µ –Ω–∞—á–∏—Å–ª–∏–ª—Å—è –¥–µ–ø–æ–∑–∏—Ç'
    await –≤–≤–æ–¥(callback, state)

@dp.callback_query(F.data == '–ü—Ä–∏—à–ª–∞ –Ω–µ —Ç–∞ —Å—É–º–º–∞_–î–µ–ø–æ–∑–∏—Ç')
async def –ü—Ä–∏—à–ª–∞_–Ω–µ_—Ç–∞_—Å—É–º–º–∞_–î–µ–ø–æ–∑–∏—Ç(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in context_user:
        context_user[callback.from_user.id] = context()
    context_user[callback.from_user.id].—Ç–µ–º–∞ = '–î–µ–ø–æ–∑–∏—Ç/–ü—Ä–∏—à–ª–∞ –Ω–µ —Ç–∞ —Å—É–º–º–∞'
    await –≤–≤–æ–¥(callback, state)

@dp.callback_query(F.data == '–ù–µ –ø—Ä–∏—à–µ–ª –±–æ–Ω—É—Å –∫ –¥–µ–ø–æ–∑–∏—Ç—É_–î–µ–ø–æ–∑–∏—Ç')
async def –ù–µ_–ø—Ä–∏—à–µ–ª_–±–æ–Ω—É—Å_–∫_–¥–µ–ø–æ–∑–∏—Ç—É_–î–µ–ø–æ–∑–∏—Ç(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in context_user:
        context_user[callback.from_user.id] = context()
    context_user[callback.from_user.id].—Ç–µ–º–∞ = '–î–µ–ø–æ–∑–∏—Ç/–ù–µ –ø—Ä–∏—à–µ–ª –±–æ–Ω—É—Å –∫ –¥–µ–ø–æ–∑–∏—Ç—É'
    await –≤–≤–æ–¥(callback, state)
    

@dp.callback_query(F.data.in_(['–ù–∞–∑–∞–¥_—Å—Ç–∞—Ä—Ç', '–ù–∞–∑–∞–¥_–î–µ–ø–æ–∑–∏—Ç', '–ù–∞–∑–∞–¥_–í—ã–≤–æ–¥', '–ù–∞–∑–∞–¥_–ù–µ_–ø—Ä–∏—à–µ–ª_–í—ã–≤–æ–¥', '–ù–∞–∑–∞–¥_–°—Ç–∞–≤–∫–∏', '–ù–∞–∑–∞–¥_–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞', '–ù–∞–∑–∞–¥_–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ']))
async def –ù–∞–∑–∞–¥0(callback: CallbackQuery, state: FSMContext):
    if callback.data == '–ù–∞–∑–∞–¥_—Å—Ç–∞—Ä—Ç':
        await start(callback)
    if callback.data == '–ù–∞–∑–∞–¥_–î–µ–ø–æ–∑–∏—Ç':
        await –î–µ–ø–æ–∑–∏—Ç(callback)
    if callback.data == '–ù–∞–∑–∞–¥_–í—ã–≤–æ–¥':
        await –í—ã–≤–æ–¥(callback)
    if callback.data == '–ù–∞–∑–∞–¥_–ù–µ_–ø—Ä–∏—à–µ–ª_–í—ã–≤–æ–¥':
        await –ù–µ_–ø—Ä–∏—à–µ–ª_–í—ã–≤–æ–¥(callback)
    if callback.data == '–ù–∞–∑–∞–¥_–°—Ç–∞–≤–∫–∏':
        await –°—Ç–∞–≤–∫–∏(callback)
    if callback.data == '–ù–∞–∑–∞–¥_–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞':
        await –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞(callback)
    if callback.data == '–ù–∞–∑–∞–¥_–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ':
        await –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ(callback)
    try:
        await state.clear()
    except:
        pass





@dp.callback_query(F.data == '–í—ã–≤–æ–¥üí∞')
async def –í—ã–≤–æ–¥(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–ù–µ –ø—Ä–∏—à–µ–ª –≤—ã–≤–æ–¥', callback_data='–ù–µ –ø—Ä–∏—à–µ–ª –≤—ã–≤–æ–¥_–í—ã–≤–æ–¥')
    b_button = InlineKeyboardButton(text='–ü—Ä–∏—à–ª–∞ –Ω–µ —Ç–∞ —Å—É–º–º–∞', callback_data='–ü—Ä–∏—à–ª–∞ –Ω–µ —Ç–∞ —Å—É–º–º–∞_–í—ã–≤–æ–¥')
    d_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    e_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_—Å—Ç–∞—Ä—Ç')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [d_button, e_button]])
    await callback.message.answer('ü§ì–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?', reply_markup=button)

@dp.callback_query(F.data == '–ù–µ –ø—Ä–∏—à–µ–ª –≤—ã–≤–æ–¥_–í—ã–≤–æ–¥')
async def –ù–µ_–ø—Ä–∏—à–µ–ª_–í—ã–≤–æ–¥(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–î–∞', callback_data='–î–∞_–í—ã–≤–æ–¥')
    b_button = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='–ù–µ—Ç_–í—ã–≤–æ–¥')
    d_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    e_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_–í—ã–≤–æ–¥')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [d_button, e_button]])
    await callback.message.answer('üöÄ–¢–µ–±–µ –æ–¥–æ–±—Ä–∏–ª–∏ –≤—ã–≤–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ?', reply_markup=button)

@dp.callback_query(F.data == '–î–∞_–í—ã–≤–æ–¥')
async def –î–∞_–í—ã–≤–æ–¥(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è', callback_data='–ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è_–í—ã–≤–æ–¥')
    b_button = InlineKeyboardButton(text='–ë–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è', callback_data='–ë–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è_–í—ã–≤–æ–¥')
    d_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    e_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_–ù–µ_–ø—Ä–∏—à–µ–ª_–í—ã–≤–æ–¥')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [d_button, e_button]])
    await callback.message.answer('‚è≥–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –æ–¥–æ–±—Ä–µ–Ω–∏—è?', reply_markup=button)

@dp.callback_query(F.data == '–ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è_–í—ã–≤–æ–¥')
async def –ú–µ–Ω—å—à–µ_–æ–¥–Ω–æ–≥–æ_–¥–Ω—è_–í—ã–≤–æ–¥(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await callback.message.answer('üîé–í—ã–≤–æ–¥—ã –º–æ–≥—É—Ç –∏–¥—Ç–∏ –¥–æ –æ–¥–Ω–æ–≥–æ –¥–Ω—è, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n\n–ï—Å–ª–∏ –ø–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–æ–¥ –Ω–µ –ø—Ä–∏–¥–µ—Ç, —Ç–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞–º –µ—â–µ —Ä–∞–∑ - –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ–º!', reply_markup=button)

@dp.callback_query(F.data == '–ë–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è_–í—ã–≤–æ–¥')
async def –ë–æ–ª—å—à–µ_–æ–¥–Ω–æ–≥–æ_–¥–Ω—è_–í—ã–≤–æ–¥(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in context_user:
        context_user[callback.from_user.id] = context()
    context_user[callback.from_user.id].—Ç–µ–º–∞ = '–í—ã–≤–æ–¥/–ù–µ –ø—Ä–∏—à–µ–ª –≤—ã–≤–æ–¥/–û–¥–æ–±—Ä–∏–ª–∏ –≤—ã–≤–æ–¥'
    await –≤–≤–æ–¥(callback, state)

@dp.callback_query(F.data == '–ù–µ—Ç_–í—ã–≤–æ–¥')
async def –ù–µ—Ç_–í—ã–≤–æ–¥(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–ú–µ–Ω—å—à–µ –¥–≤—É—Ö –¥–Ω–µ–π', callback_data='–ú–µ–Ω—å—à–µ –¥–≤—É—Ö –¥–Ω–µ–π_–í—ã–≤–æ–¥')
    b_button = InlineKeyboardButton(text='–ë–æ–ª—å—à–µ –¥–≤—É—Ö –¥–Ω–µ–π', callback_data='–ë–æ–ª—å—à–µ –¥–≤—É—Ö –¥–Ω–µ–π_–í—ã–≤–æ–¥')
    d_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    e_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_–ù–µ_–ø—Ä–∏—à–µ–ª_–í—ã–≤–æ–¥')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [d_button, e_button]])
    await callback.message.answer('‚è≥–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥?', reply_markup=button)

@dp.callback_query(F.data == '–ú–µ–Ω—å—à–µ –¥–≤—É—Ö –¥–Ω–µ–π_–í—ã–≤–æ–¥')
async def –ú–µ–Ω—å—à–µ_–¥–≤—É—Ö_–¥–Ω–µ–π_–í—ã–≤–æ–¥(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await callback.message.answer('üîé–û–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –º–æ–∂–µ—Ç –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –¥–æ –¥–≤—É—Ö –¥–Ω–µ–π.\n\n–ï—Å–ª–∏ –ø–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–≤–æ–¥ –Ω–µ –æ–¥–æ–±—Ä—è—Ç, —Ç–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –Ω–∞–º –µ—â–µ —Ä–∞–∑ - –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ–º!', reply_markup=button)

@dp.callback_query(F.data == '–ë–æ–ª—å—à–µ –¥–≤—É—Ö –¥–Ω–µ–π_–í—ã–≤–æ–¥')
async def –ë–æ–ª—å—à–µ_–¥–≤—É—Ö_–¥–Ω–µ–π_–í—ã–≤–æ–¥(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in context_user:
        context_user[callback.from_user.id] = context()
    context_user[callback.from_user.id].—Ç–µ–º–∞ = '–í—ã–≤–æ–¥/–ù–µ –ø—Ä–∏—à–µ–ª –≤—ã–≤–æ–¥/–ù–µ –æ–¥–æ–±—Ä–∏–ª–∏ –≤—ã–≤–æ–¥'
    await –≤–≤–æ–¥(callback, state)

@dp.callback_query(F.data == '–ü—Ä–∏—à–ª–∞ –Ω–µ —Ç–∞ —Å—É–º–º–∞_–í—ã–≤–æ–¥')
async def –ü—Ä–∏—à–ª–∞_–Ω–µ_—Ç–∞_—Å—É–º–º–∞_–í—ã–≤–æ–¥(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in context_user:
        context_user[callback.from_user.id] = context()
    context_user[callback.from_user.id].—Ç–µ–º–∞ = '–í—ã–≤–æ–¥/–ü—Ä–∏—à–ª–∞ –Ω–µ —Ç–∞ —Å—É–º–º–∞'
    await –≤–≤–æ–¥(callback, state)






@dp.callback_query(F.data == '–°—Ç–∞–≤–∫–∏üé∞')
async def –°—Ç–∞–≤–∫–∏(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–ù–µ –ø—Ä–∏—à–µ–ª –≤—ã–∏–≥—Ä—ã—à', callback_data='–ù–µ –ø—Ä–∏—à–µ–ª –≤—ã–∏–≥—Ä—ã—à_–°—Ç–∞–≤–∫–∏')
    b_button = InlineKeyboardButton(text='–ü—Ä–æ–ø–∞–ª–∞ —Å—Ç–∞–≤–∫–∞', callback_data='–ü—Ä–æ–ø–∞–ª–∞ —Å—Ç–∞–≤–∫–∞_–°—Ç–∞–≤–∫–∏')
    c_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    d_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_—Å—Ç–∞—Ä—Ç')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [c_button, d_button]])
    await callback.message.answer('ü§ì–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?', reply_markup=button)

@dp.callback_query(F.data == '–ù–µ –ø—Ä–∏—à–µ–ª –≤—ã–∏–≥—Ä—ã—à_–°—Ç–∞–≤–∫–∏')
async def –ù–µ_–ø—Ä–∏—à–µ–ª_–≤—ã–∏–≥—Ä—ã—à_–°—Ç–∞–≤–∫–∏(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–û—Ç–æ–±—Ä–∞–∂–µ–Ω', callback_data='–û—Ç–æ–±—Ä–∞–∂–µ–Ω_–°—Ç–∞–≤–∫–∏')
    b_button = InlineKeyboardButton(text='–ù–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω', callback_data='–ù–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω_–°—Ç–∞–≤–∫–∏')
    c_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    d_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_–°—Ç–∞–≤–∫–∏')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [c_button, d_button]])
    await callback.message.answer('üìù–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä.\n–¢–∞–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤—ã–∏–≥—Ä—ã—à?', reply_markup=button)

@dp.callback_query(F.data == '–û—Ç–æ–±—Ä–∞–∂–µ–Ω_–°—Ç–∞–≤–∫–∏')
async def –û—Ç–æ–±—Ä–∞–∂–µ–Ω_–°—Ç–∞–≤–∫–∏(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await callback.message.answer('‚úÖ–ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤—ã–∏–≥—Ä—ã—à, –∑–Ω–∞—á–∏—Ç –æ–Ω –ø—Ä–∏—à–µ–ª —Ç–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å.', reply_markup=button)

@dp.callback_query(F.data == '–ù–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω_–°—Ç–∞–≤–∫–∏')
async def –ù–µ_–æ—Ç–æ–±—Ä–∞–∂–µ–Ω_–°—Ç–∞–≤–∫–∏(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in context_user:
        context_user[callback.from_user.id] = context()
    context_user[callback.from_user.id].—Ç–µ–º–∞ = '–°—Ç–∞–≤–∫–∏/–ù–µ –ø—Ä–∏—à–µ–ª –≤—ã–∏–≥—Ä—ã—à/–ù–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω'
    await –≤–≤–æ–¥(callback, state)

@dp.callback_query(F.data == '–ü—Ä–æ–ø–∞–ª–∞ —Å—Ç–∞–≤–∫–∞_–°—Ç–∞–≤–∫–∏')
async def –ü—Ä–æ–ø–∞–ª–∞_—Å—Ç–∞–≤–∫–∞_–°—Ç–∞–≤–∫–∏(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞', callback_data='–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞_–°—Ç–∞–≤–∫–∏')
    b_button = InlineKeyboardButton(text='–ù–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞', callback_data='–ù–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞_–°—Ç–∞–≤–∫–∏')
    d_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    e_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_–°—Ç–∞–≤–∫–∏')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [d_button, e_button]])
    await callback.message.answer('üìù–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä.\n–¢–∞–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞?', reply_markup=button)

@dp.callback_query(F.data == '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞_–°—Ç–∞–≤–∫–∏')
async def –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞_–°—Ç–∞–≤–∫–∏(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await callback.message.answer('‚úÖ–ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞, –∑–Ω–∞—á–∏—Ç –æ–Ω–∞ –∏–≥—Ä–∞–ª–∞!', reply_markup=button)

@dp.callback_query(F.data == '–ù–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞_–°—Ç–∞–≤–∫–∏')
async def –ù–µ_–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞_–°—Ç–∞–≤–∫–∏(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in context_user:
        context_user[callback.from_user.id] = context()
    context_user[callback.from_user.id].—Ç–µ–º–∞ = '–°—Ç–∞–≤–∫–∏/–ü—Ä–æ–ø–∞–ª–∞ —Å—Ç–∞–≤–∫–∞/–ù–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞'
    await –≤–≤–æ–¥(callback, state)





@dp.callback_query(F.data == '–ë–æ–Ω—É—Å—ãüéÅ')
async def –ë–æ–Ω—É—Å—ã(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥_–ë–æ–Ω—É—Å—ã')
    b_button = InlineKeyboardButton(text='–ù–µ –¥–æ—Å—Ç—É–ø–Ω—ã –±–æ–Ω—É—Å—ã', callback_data='–ù–µ –¥–æ—Å—Ç—É–ø–Ω—ã –±–æ–Ω—É—Å—ã_–ë–æ–Ω—É—Å—ã')
    c_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    d_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_—Å—Ç–∞—Ä—Ç')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [c_button, d_button]])
    await callback.message.answer('ü§ì–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?', reply_markup=button)

@dp.callback_query(F.data == '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥_–ë–æ–Ω—É—Å—ã')
async def –ù–µ_—Ä–∞–±–æ—Ç–∞–µ—Ç_–ø—Ä–æ–º–æ–∫–æ–¥_–ë–æ–Ω—É—Å—ã(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await callback.message.answer('ü•∫–ó–Ω–∞—á–∏—Ç —É –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ–≤—Å—Ç–≤—É–µ—Ç.', reply_markup=button)

@dp.callback_query(F.data == '–ù–µ –¥–æ—Å—Ç—É–ø–Ω—ã –±–æ–Ω—É—Å—ã_–ë–æ–Ω—É—Å—ã')
async def –ù–µ_–¥–æ—Å—Ç—É–ø–Ω—ã_–±–æ–Ω—É—Å—ã_–ë–æ–Ω—É—Å—ã(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await callback.message.answer('ü•∫–ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å, —Ç–æ —Å–¥–µ–ª–∞–π 2 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞ –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å:\n\n1. –ó–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∂–∏ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∞–∫–∫–∞—É–Ω—Ç\n2. –ü–µ—Ä–µ–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª', reply_markup=button)






@dp.callback_query(F.data == '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞üë•')
async def –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ RevShare', callback_data='–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞')
    b_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    c_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_—Å—Ç–∞—Ä—Ç')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button, c_button]])
    await callback.message.answer('ü§ì–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?', reply_markup=button)

@dp.callback_query(F.data == '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞')
async def –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ_RevShare_–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞(callback: CallbackQuery, state: FSMContext):
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    b_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button, b_button]])
    await callback.message.answer('üë®‚Äçüíª–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ç–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫. –û–ø–∏—à–∏, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è: –º–æ–∂–µ—Ç –±—ã—Ç—å —é—Ç—É–±, —Å—Ç—Ä–∏–º—ã –∏–ª–∏ —Ç—ã –≤–µ–±-–º–∞—Å—Ç–µ—Ä.\n\n–¢–∞–∫–∂–µ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã, —ç—Ç–æ –ø–æ–≤—ã—Å–∏—Ç —Ç–≤–æ–∏ —à–∞–Ω—Å—ã –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ —Å–∏—Å—Ç–µ–º–µ RevShare!', reply_markup=button)
    await state.set_state(context_sot1.—Ç–µ–∫—Å—Ç)

@dp.message(StateFilter(context_sot1.—Ç–µ–∫—Å—Ç))
async def –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ_RevShare_–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è_—Å–∏—Å—Ç–µ–º–∞_—Ç–µ–∫—Å—Ç(message: Message, state: FSMContext):
    global context_text, context_user, context_delete
    while True:
        num = random.randint(1000000, 9999999)
        if num not in context_user:
            break
        else:
            print('–µ—Å—Ç—å')
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await message.answer('üôÇ–û—Ç–ª–∏—á–Ω–æ!\n\n–ï—Å–ª–∏ –Ω–∞–º –ø–æ–¥–æ–π–¥–µ—Ç —Ç–≤–æ—è –∑–∞—è–≤–∫–∞, —Ç–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –Ω–∞–ø–∏—à–µ–º!', reply_markup=button)
    text= f'–¢–∏–∫–µ—Ç: ‚Ññ{str(num)}\n–¢–µ–º–∞: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞/–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ RevShare\n\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n–¢–µ–∫—Å—Ç: {message.text}'
    await bot.send_message(ID_CHANNEL_SOT, text=text)
    await state.clear()








@dp.callback_query(F.data == '–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
async def –î—Ä—É–≥–æ–π_–≤–æ–ø—Ä–æ—Å(callback: CallbackQuery, state: FSMContext):
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await callback.message.answer('ü§ì–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?', reply_markup=button)
    if callback.from_user.id not in context_user:
        context_user[callback.from_user.id] = context()
    context_user[callback.from_user.id].—Ç–µ–º–∞ = '–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å'
    context_user[callback.from_user.id].id = ' '
    await state.set_state(context.—Ç–µ–∫—Å—Ç)








async def –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ_—Ç–µ–∫—Å—Ç(callback: CallbackQuery, state: FSMContext):
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    b_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button, b_button]])
    if context_user[callback.from_user.id].—Ç–µ–º–∞ != '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ/–î—Ä—É–≥–æ–µ':
        await callback.message.answer('üîó–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª.', reply_markup=button)
    else:
        await callback.message.answer('‚úç–û–ø–∏—à–∏ —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.', reply_markup=button)
    await state.set_state(context_sot.—Ç–µ–∫—Å—Ç)

@dp.message(StateFilter(context_sot.—Ç–µ–∫—Å—Ç))
async def –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ_—é–∑–µ—Ä–Ω–µ–π–º(message: Message, state: FSMContext):
    context_user[message.from_user.id].—Ç–µ–∫—Å—Ç = message.text
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    b_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button, b_button]])
    await message.answer('üåê–ö–∞–∫–æ–π —É —Ç–µ–±—è —é–∑–µ—Ä–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ?', reply_markup=button)
    await state.set_state(context_sot.username)

@dp.message(StateFilter(context_sot.username))
async def –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ_—Ç–∏–∫–µ—Ç(message: Message, state: FSMContext):
    global context_text, context_user, context_delete
    context_user[message.from_user.id].username = message.text
    while True:
        num = random.randint(1000000, 9999999)
        if num not in context_user:
            break
        else:
            print('–µ—Å—Ç—å')
    context_user[message.from_user.id].—Ç–∏–∫–µ—Ç = '‚Ññ' + str(num)   
    a_button = InlineKeyboardButton(text='üè† –í –Ω–∞—á–∞–ª–æ', callback_data='üè† –í –Ω–∞—á–∞–ª–æ')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button]])
    await message.answer('üôÇ–û—Ç–ª–∏—á–Ω–æ!\n\n–ï—Å–ª–∏ –Ω–∞–º –ø–æ–¥–æ–π–¥–µ—Ç —Ç–≤–æ—è –∑–∞—è–≤–∫–∞, —Ç–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –Ω–∞–ø–∏—à–µ–º!', reply_markup=button)
    text= f'–¢–∏–∫–µ—Ç: {context_user[message.from_user.id].—Ç–∏–∫–µ—Ç}\n–¢–µ–º–∞: {context_user[message.from_user.id].—Ç–µ–º–∞}\n\n–Æ–∑–µ—Ä–Ω–µ–π–º: {context_user[message.from_user.id].username}\n–¢–µ–∫—Å—Ç: {context_user[message.from_user.id].—Ç–µ–∫—Å—Ç}'
    await bot.send_message(ID_CHANNEL_SOT, text=text)
    await state.clear()








@dp.callback_query(F.data == '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æü§ù')
async def –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ(callback: CallbackQuery):
    a_button = InlineKeyboardButton(text='–Ø —é—Ç—É–±–µ—Ä', callback_data='–Ø —é—Ç—É–±–µ—Ä')
    b_button = InlineKeyboardButton(text='–Ø —Å—Ç—Ä–∏–º–µ—Ä', callback_data='–Ø —Å—Ç—Ä–∏–º–µ—Ä')
    c_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–µ', callback_data='–î—Ä—É–≥–æ–µ_–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ')
    d_button = InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data='–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å')
    e_button = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ù–∞–∑–∞–¥_—Å—Ç–∞—Ä—Ç')
    button   = InlineKeyboardMarkup(inline_keyboard=[[a_button], [b_button], [c_button], [d_button, e_button]])
    await callback.message.answer('ü§ì–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n–ö—Ç–æ —Ç—ã?', reply_markup=button)




@dp.callback_query(F.data.in_(['–Ø —é—Ç—É–±–µ—Ä', '–Ø —Å—Ç—Ä–∏–º–µ—Ä', '–î—Ä—É–≥–æ–µ_–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ']))
async def –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ_–Ø(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in context_user:
        context_user[callback.from_user.id] = context()
    else:
        del context_user[callback.from_user.id]
        context_user[callback.from_user.id] = context()
    if callback.data == '–Ø —é—Ç—É–±–µ—Ä':
        context_user[callback.from_user.id].—Ç–µ–º–∞ = '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ/–Ø —é—Ç—É–±–µ—Ä'
        await –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ_—Ç–µ–∫—Å—Ç(callback, state)
    if callback.data == '–Ø —Å—Ç—Ä–∏–º–µ—Ä':
        context_user[callback.from_user.id].—Ç–µ–º–∞ = '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ/–Ø —Å—Ç—Ä–∏–º–µ—Ä'
        await –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ_—Ç–µ–∫—Å—Ç(callback, state)
    if callback.data == '–î—Ä—É–≥–æ–µ_–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ':
        context_user[callback.from_user.id].—Ç–µ–º–∞ = '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ/–î—Ä—É–≥–æ–µ'
        await –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ_—Ç–µ–∫—Å—Ç(callback, state)







async def main():
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(3)
            continue

if __name__ == '__main__':
    asyncio.run(main())
